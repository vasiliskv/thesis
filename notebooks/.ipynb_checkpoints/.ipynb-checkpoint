{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import stats\n",
    "from sklearn import preprocessing\n",
    "\n",
    "# use seaborn plotting defaults\n",
    "import seaborn as sns; sns.set()\n",
    "\n",
    "\n",
    "features = pd.read_csv(\"../data/new_labeled_features.csv\",index_col=0)\n",
    "tfeatures = features.T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "## Select K Best for feature selection, after normalization/scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import SelectKBest, f_classif\n",
    "from sklearn.preprocessing import Normalizer, MinMaxScaler, StandardScaler\n",
    "\n",
    "norm_list = [Normalizer(), StandardScaler(with_mean=False), MinMaxScaler()]\n",
    "selK = SelectKBest(f_classif, k=4)\n",
    "tnfeatures = norm_list[0].transform(tfeatures.iloc[:28, :])\n",
    "nfeatures = tnfeatures.T\n",
    "selK.fit(nfeatures, features.iloc[:, -1])\n",
    "print(\"SELECT K BEST NUMBERS:\")\n",
    "print(selK.get_support())\n",
    "print(selK.scores_[selK.get_support()])\n",
    "for norm in norm_list[1:]:\n",
    "    nfeatures = norm.fit_transform(features.iloc[:, :28])\n",
    "    selK.fit(nfeatures, features.iloc[:, -1])\n",
    "    print(\"\\n\\nSELECT K BEST NUMBERS:\")\n",
    "    print(selK.get_support())\n",
    "    print(selK.scores_[selK.get_support()])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "## Select K Best for all 4 signals, after normalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "SELECT K BEST NUMBERS FOR signal 0:\n",
      "[False False False False False False False False False False  True False\n",
      " False False False False  True  True  True False False False False False\n",
      " False False False False]\n",
      "[330.9079015  422.54146593 335.18651221 382.78688292]\n",
      "Index(['10', '16', '17', '18'], dtype='object')\n",
      "\n",
      "\n",
      "SELECT K BEST NUMBERS FOR signal 1:\n",
      "[False False False False False False False False False False False False\n",
      " False  True  True False False False False False False  True  True False\n",
      " False False False False]\n",
      "[311.06969737 306.34495183 356.91090893 321.01200709]\n",
      "Index(['41', '42', '49', '50'], dtype='object')\n",
      "\n",
      "\n",
      "SELECT K BEST NUMBERS FOR signal 2:\n",
      "[False False False False False False False False False False  True False\n",
      " False False False False  True  True  True False False False False False\n",
      " False False False False]\n",
      "[329.72298115 422.36009666 335.43952703 382.80602317]\n",
      "Index(['66', '72', '73', '74'], dtype='object')\n",
      "\n",
      "\n",
      "SELECT K BEST NUMBERS FOR signal 3:\n",
      "[False False False False False False False False False False False False\n",
      " False  True  True False False False False False False  True  True False\n",
      " False False False False]\n",
      "[313.39261435 304.34262507 361.47049712 319.38287379]\n",
      "Index(['97', '98', '105', '106'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_selection import SelectKBest, f_classif\n",
    "from sklearn.preprocessing import Normalizer\n",
    "\n",
    "norm = Normalizer()\n",
    "selK = SelectKBest(f_classif, k=4)\n",
    "col = features.columns\n",
    "for i in range(4):\n",
    "    tnfeatures = norm.transform(tfeatures.iloc[i*28:(i+1)*28, :])\n",
    "    nfeatures = tnfeatures.T\n",
    "    selK.fit(nfeatures, features.iloc[:, -1])\n",
    "    print(\"\\n\\nSELECT K BEST NUMBERS FOR signal %d:\"%(i))\n",
    "    print(selK.get_support())\n",
    "    print(selK.scores_[selK.get_support()])\n",
    "    feat = col[i*28:(i+1)*28]\n",
    "    print(feat[selK.get_support()])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "## feature selection for the 4 normalized signals, using RFECV with Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimal number of features : 17\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rfecv ranking:\n",
      "[ 1  1  5  1  1  1  1  1  1  6  4  3  2  1  9  7  1  1  1  8  1  1 10 12\n",
      "  1  1 11  1]\n",
      "Index(['0', '1', '3', '4', '5', '6', '7', '8', '13', '16', '17', '18', '20',\n",
      "       '21', '24', '25', '27'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Optimal number of features : 7\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rfecv ranking:\n",
      "[ 2  1  5  4  1  6  1  3 17 16 21 20 11  1 13 18 12 14  8  7  1  1  1 19\n",
      " 15 22 10  9]\n",
      "Index(['29', '32', '34', '41', '48', '49', '50'], dtype='object')\n",
      "\n",
      "\n",
      "Optimal number of features : 13\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rfecv ranking:\n",
      "[ 1  1  1  8 10  7  1  1  1  5 12  4  1  1  2 14  1  1  1 13  3  6 16 15\n",
      "  9  1  1 11]\n",
      "Index(['56', '57', '58', '62', '63', '64', '68', '69', '72', '73', '74', '81',\n",
      "       '82'],\n",
      "      dtype='object')\n",
      "\n",
      "\n",
      "Optimal number of features : 28\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rfecv ranking:\n",
      "[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n",
      "Index(['84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95',\n",
      "       '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106',\n",
      "       '107', '108', '109', '110', '111'],\n",
      "      dtype='object')\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.feature_selection import RFECV\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.preprocessing import Normalizer\n",
    "\n",
    "estimators_list = [LogisticRegression(C=1000, tol=0.001)]\n",
    "col = features.columns\n",
    "norm = Normalizer()\n",
    "# Create the RFE object and compute a cross-validated score.\n",
    "# The \"accuracy\" scoring is proportional to the number of correct\n",
    "# classifications\n",
    "for i in range(4):\n",
    "    for est in estimators_list:\n",
    "        rfecv = RFECV(estimator=est, step=1, cv=StratifiedKFold(5),scoring='accuracy')\n",
    "        tnfeatures = norm.transform(tfeatures.iloc[i*28:(i+1)*28, :])\n",
    "        nfeatures = tnfeatures.T\n",
    "        rfecv.fit(nfeatures, features.iloc[:, -1])\n",
    "\n",
    "        print(\"Optimal number of features : %d\" % rfecv.n_features_)\n",
    "\n",
    "        # Plot number of features VS. cross-validation scores\n",
    "        fig = plt.figure()\n",
    "        plt.xlabel(\"Number of features selected\")\n",
    "        plt.ylabel(\"Cross validation score (nb of correct classifications)\")\n",
    "        plt.plot(range(1, len(rfecv.grid_scores_) + 1), rfecv.grid_scores_)\n",
    "        plt.show()\n",
    "        print(\"rfecv ranking:\")\n",
    "        print(rfecv.ranking_)\n",
    "        feat = col[i*28:(i+1)*28]\n",
    "        print(feat[rfecv.get_support()])\n",
    "    print()\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "## The features set as important for each normalized signal by 2 ensemble classifiers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['0', '1', '3', '8', '9', '10', '16', '17', '18', '24', '25', '27'], dtype='object')\n",
      "Index(['0', '3', '8', '10', '16', '17', '18', '24', '25', '27'], dtype='object')\n",
      "\n",
      "\n",
      "\n",
      "Index(['28', '29', '30', '31', '33', '34', '40', '41', '42', '48', '49', '50'], dtype='object')\n",
      "Index(['28', '29', '30', '31', '33', '34', '41', '42', '48', '49', '50'], dtype='object')\n",
      "\n",
      "\n",
      "\n",
      "Index(['57', '64', '65', '66', '72', '73', '74', '81'], dtype='object')\n",
      "Index(['64', '65', '66', '72', '73', '74', '81', '82'], dtype='object')\n",
      "\n",
      "\n",
      "\n",
      "Index(['89', '90', '96', '97', '98', '104', '105', '106'], dtype='object')\n",
      "Index(['89', '90', '97', '98', '104', '105', '106'], dtype='object')\n",
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_selection import SelectFromModel\n",
    "from sklearn.ensemble import ExtraTreesClassifier, RandomForestClassifier\n",
    "from sklearn.preprocessing import Normalizer\n",
    "\n",
    "ensemble_list = [ExtraTreesClassifier(n_estimators=100), RandomForestClassifier(n_estimators=100)]\n",
    "col = features.columns\n",
    "\n",
    "for i in range(4):\n",
    "    tnfeatures = Normalizer().transform(tfeatures.iloc[i*28:(i+1)*28, :])\n",
    "    nfeatures = tnfeatures.T\n",
    "    for est in ensemble_list:\n",
    "        featureSelection = SelectFromModel(est, threshold=0.035714285714285)\n",
    "        featureSelection.fit(nfeatures, features.label)\n",
    "        selectedFeatures = featureSelection.transform(nfeatures)\n",
    "        feat = col[i*28:(i+1)*28]\n",
    "        print(feat[featureSelection.get_support()])\n",
    "    print(\"\\n\\n\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# TESTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.06427025 0.04069783 0.02879415 0.04886765 0.02303449 0.02446383\n",
      " 0.02359162 0.02511599 0.07020633 0.04157194 0.04752355 0.02369311\n",
      " 0.01777545 0.01735526 0.01751683 0.01744964 0.0749474  0.06488946\n",
      " 0.06981913 0.01820568 0.00974844 0.00918412 0.01703956 0.01748193\n",
      " 0.05427083 0.05949569 0.02729965 0.04569021]\n",
      "[0.08346166 0.02552994 0.02869594 0.03830917 0.04736252 0.02834501\n",
      " 0.0226708  0.0270094  0.1030324  0.03674292 0.05517888 0.02814528\n",
      " 0.01589802 0.01516755 0.01863713 0.01624966 0.05361549 0.07076341\n",
      " 0.08003661 0.02018685 0.00196541 0.00255725 0.01005125 0.00802656\n",
      " 0.06518618 0.03334718 0.0231808  0.04064673]\n"
     ]
    }
   ],
   "source": [
    "# Feature Importance\n",
    "from sklearn.ensemble import ExtraTreesClassifier, RandomForestClassifier\n",
    "# fit an Extra Trees model to the data\n",
    "ensemble_list = [ExtraTreesClassifier(n_estimators=100), RandomForestClassifier(n_estimators=100)]\n",
    "for est in ensemble_list:\n",
    "    est.fit(features.iloc[:, :28], features[\"label\"])\n",
    "# display the relative importance of each attribute\n",
    "    print(est.feature_importances_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RFE NUMBERS:\n",
      "[ 3  4 11 16 12 10 15 14  2  1  8 17 21 22 20 19  1  1  7 18 25 26 24 23\n",
      "  6  5  9 13]\n",
      "RFE NUMBERS:\n",
      "[ 5 11 10 13 17 15 14 12  1  2  4  9 22 21 19 20  1  1  3 18 25 26 24 23\n",
      "  8  7 16  6]\n",
      "\n",
      "\n",
      "RFECV NUMBERS:\n",
      "5\n",
      "[ 3  9  8 11 15 13 12 10  1  1  2  7 20 19 17 18  1  1  1 16 23 24 22 21\n",
      "  6  5 14  4]\n",
      "RFECV NUMBERS:\n",
      "6\n",
      "[ 1  1  8 13  9  7 12 11  1  1  5 14 18 19 17 16  1  1  4 15 22 23 21 20\n",
      "  3  2  6 10]\n",
      "\n",
      "\n",
      "SELECT K BEST NUMBERS:\n",
      "[False False False False False False False False  True  True  True False\n",
      " False False False False  True  True  True False False False False False\n",
      " False False False False]\n",
      "[ 14.83733383   2.64773741 216.25321271   6.10124776   2.30161449\n",
      "   2.30161449   2.67907026   2.67907026 315.28839958 277.45778452\n",
      " 330.9079015    1.77919847  48.60739824  48.60739824  28.23374354\n",
      "  25.13126669 422.54146593 335.18651221 382.78688292   1.03911178\n",
      "  26.56994587  26.56994587  23.82749102  23.65037689  10.63237147\n",
      "   3.59993633 189.3751227    6.10141133]\n"
     ]
    }
   ],
   "source": [
    "# Recursive Feature Elimination\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.feature_selection import RFE, RFECV\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.feature_selection import SelectKBest, f_classif\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "\n",
    "# create a base classifier used to evaluate a subset of attributes\n",
    "model = LogisticRegression()\n",
    "# create the RFE model and select 3 attributes\n",
    "rfe = RFE(model, 3)\n",
    "rfe.fit(features.iloc[:, :28], features[\"label\"])\n",
    "# summarize the selection of the attributes\n",
    "print(\"RFE NUMBERS:\")\n",
    "print(rfe.ranking_)\n",
    "\n",
    "model = SVC(kernel=\"linear\")\n",
    "rfe = RFE(model, 3)\n",
    "rfe.fit(features.iloc[:, :28], features[\"label\"])\n",
    "print(\"RFE NUMBERS:\")\n",
    "print(rfe.ranking_)\n",
    "\n",
    "#RFE model with Cross Validation\n",
    "#, scoring='accuracy'\n",
    "\n",
    "model = SVC(kernel=\"linear\")\n",
    "rfecv = RFECV(estimator=model, step=1, cv=StratifiedKFold(2))\n",
    "rfecv.fit(features.iloc[:, :28], features[\"label\"])\n",
    "print(\"\\n\\nRFECV NUMBERS:\")\n",
    "print(rfecv.n_features_)\n",
    "print(rfecv.ranking_)\n",
    "model = LogisticRegression()\n",
    "rfecv = RFECV(estimator=model, step=1, cv=StratifiedKFold(2))\n",
    "rfecv.fit(features.iloc[:, :28], features[\"label\"])\n",
    "print(\"RFECV NUMBERS:\")\n",
    "print(rfecv.n_features_)\n",
    "print(rfecv.ranking_)\n",
    "\n",
    "\n",
    "\n",
    "selK = SelectKBest(f_classif, k=6)\n",
    "selK.fit(features.iloc[:, :28], features[\"label\"])\n",
    "print(\"\\n\\nSELECT K BEST NUMBERS:\")\n",
    "print(selK.get_support())\n",
    "print(selK.scores_)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
